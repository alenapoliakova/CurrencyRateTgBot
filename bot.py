from telebot import TeleBot, types
from requests import get
from re import findall, match
from bs4 import BeautifulSoup as bs
from time import strftime, localtime
from settings import BOT_TOKEN, BOT_NAME
from collections import namedtuple


bot = TeleBot(BOT_TOKEN, parse_mode='html')
name = BOT_NAME

date = namedtuple('Date', ['day', 'month', 'year'])

db = {}
data = {
    'start': f'–ü—Ä–∏–≤–µ—Ç! –ë–æ—Ç <b>{name}</b> –¥–µ–ª–∏—Ç—Å—è —Å –≤–∞–º–∏ –∫—É—Ä—Å–æ–º –≤–∞–ª—é—Ç —Å <b>—Å–∞–π—Ç–∞ –¶–ë</b>.\n\n'
             f'–û—Ç–ø—Ä–∞–≤—å—Ç–µ <b>/currency</b>, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –≤–∞–ª—é—Ç—É.',
    'open_markup': '–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Ç–∫—Ä—ã—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É.',
    'currency': '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 02.02.2022, 02 02 2022, 02.02.22 –∏–ª–∏ 02 02 22',
    'answer_to_user': '–Ø –Ω–µ –ø–æ–Ω—è–ª –≤–∞—Å. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–∞—à–∞ –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–µ–Ω—å.–º–µ—Å—è—Ü.–≥–æ–¥ –∏–ª–∏ –¥–µ–Ω—å –º–µ—Å—è—Ü –≥–æ–¥.',
    'close_markup': '–í—ã –∑–∞–∫—Ä—ã–ª–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É. –û—Ç–ø—Ä–∞–≤—å—Ç–µ <b>/currency</b>, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.',
    'not_in_dict': '–í—ã –≤–≤–µ–ª–∏ –∫–æ–º–∞–Ω–¥—É, –∫–æ—Ç–æ—Ä–æ–π –Ω–µ—Ç –≤ –º–æ—ë–º —Å–ª–æ–≤–∞—Ä–µ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ <b>/start</b>, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º.'
}


def parse_date(actual_date: str) -> tuple | int:
    try:
        real_date = match(r'^[0-9]{1,2}[ .][0-9]{1,2}[ .][0-9]{4}', actual_date).group()
    except TypeError:
        return 0
    except AttributeError:  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –¥–ª—è .group()
        return 0
    else:
        now_day, now_month, now_year = strftime("%d %m %Y", localtime()).split()

        if '.' in real_date:
            real_date = real_date.split('.')
        else:
            real_date = real_date.split()

        new_date = date(real_date[0], real_date[1], real_date[2])

        if int(new_date.year) > int(now_year):
            return 0
        elif int(new_date.year) == int(now_year) and int(new_date.month) > int(now_month):
            return 0
        elif int(new_date.year) == int(now_year) and int(new_date.month) == int(now_month) and int(new_date.day) > int(now_day):
            return 0

        return new_date


def get_currency(actual_currency: str, date_to_parse: tuple):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫—É—Ä—Å–∞ –¶–ë. –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–π –∫—É—Ä—Å —É–∂–µ –ø–∞—Ä—Å–∏–ª—Å—è, —Ç–æ –¥–∞–Ω–Ω—ã–µ –≤–æ–∑—å–º—É—Ç—Å—è –∏–∑ —Å–ª–æ–≤–∞—Ä—è db.
    :param actual_currency: –ò–º—è –≤–∞–ª—é—Ç—ã.
    :param date_to_parse: –ö–æ—Ä—Ç–µ–∂, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞—Ç—É –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞.
    :return: –¢–µ–∫—Å—Ç —Å –∏–º–µ–Ω–µ–º –≤–∞–ª—é—Ç—ã –∏ –µ—ë –∫—É—Ä—Å–æ–º.
    """
    day, month, year = date_to_parse.day, date_to_parse.month, date_to_parse.year
    # day, month, year = strftime("%d %m %Y", localtime()).split()

    currency = db.get(f'{day} {month} {year} {actual_currency}', None)
    if currency:
        return f'–ö—É—Ä—Å <b>{currency[0]}</b> –Ω–∞ {day}.{month}.{year}: {currency[1]}'
    else:
        url = f'https://cbr.ru/scripts/XML_daily.asp?date_req={day}/{month}/{year}'

        request = get(url)
        soup = bs(request.text, 'lxml')

        for tag in soup.findAll('valute'):
            result = tag.get_text(strip=True)
            name_of_currency = ' '.join(findall(r'[–∞-—è–ê-—è]+', result))

            numbers = findall(r'[0-9]+', result)
            price = f'{numbers[-2]}.{numbers[-1]}'

            if actual_currency in name_of_currency:
                db[f'{day} {month} {year} {actual_currency}'] = (name_of_currency, price)
                return f'–ö—É—Ä—Å <b>{name_of_currency}</b> –Ω–∞ {day}.{month}.{year}: {price}‚ÇΩ'


@bot.message_handler(commands='start')
def start(message):
    bot.send_message(message.chat.id, data['start'])


@bot.message_handler(commands='currency')
def currency(message):
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)

    button_1 = types.KeyboardButton('–ö—É—Ä—Å –î–æ–ª–ª–∞—Ä–∞ –°–®–ê üí≤')
    button_2 = types.KeyboardButton('–ö—É—Ä—Å –ï–≤—Ä–æ üí∂')
    button_3 = types.KeyboardButton('–ö—É—Ä—Å –§—É–Ω—Ç–∞ —Å—Ç–µ—Ä–ª–∏–Ω–≥–æ–≤ üí∑')
    button_4 = types.KeyboardButton('–ö—É—Ä—Å –ë–µ–ª–æ—Ä—É—Å—Å–∫–æ–≥–æ —Ä—É–±–ª—è üáßüáæ')
    button_5 = types.KeyboardButton('–ù–∞–∑–∞–¥')

    markup.add(button_1, button_2, button_3, button_4, button_5)

    bot.send_message(message.chat.id, data['open_markup'], reply_markup=markup)


def answer_to_user(message, **kwargs):
    # TODO: —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∑–¥–µ—Å—å –¥–∞—Ç—É –∏ –¥–æ–±–∞–≤–∏—Ç—å –≤ get_currency –≤—ã–±–æ—Ä –¥–∞—Ç—ã

    parsed_date = parse_date(actual_date=message.text)

    if isinstance(parsed_date, date):
        bot.send_message(message.chat.id, get_currency(actual_currency=kwargs['valute'], date_to_parse=parsed_date))
    else:
        bot.send_message(message.chat.id, data['answer_to_user'])


@bot.message_handler(content_types='text')
def reply(message):

    match message.text:
        case '–ö—É—Ä—Å –î–æ–ª–ª–∞—Ä–∞ –°–®–ê üí≤':
            msg = bot.send_message(message.chat.id, data['currency'])
            bot.register_next_step_handler(message=msg, callback=answer_to_user, valute='–î–æ–ª–ª–∞—Ä –°–®–ê')
        case '–ö—É—Ä—Å –ï–≤—Ä–æ üí∂':
            msg = bot.send_message(message.chat.id, data['currency'])
            bot.register_next_step_handler(message=msg, callback=answer_to_user, valute='–ï–≤—Ä–æ')
        case '–ö—É—Ä—Å –§—É–Ω—Ç–∞ —Å—Ç–µ—Ä–ª–∏–Ω–≥–æ–≤ üí∑':
            msg = bot.send_message(message.chat.id, data['currency'])
            bot.register_next_step_handler(message=msg, callback=answer_to_user, valute='–§—É–Ω—Ç —Å—Ç–µ—Ä–ª–∏–Ω–≥–æ–≤')
        case '–ö—É—Ä—Å –ë–µ–ª–æ—Ä—É—Å—Å–∫–æ–≥–æ —Ä—É–±–ª—è üáßüáæ':
            msg = bot.send_message(message.chat.id, data['currency'])
            bot.register_next_step_handler(message=msg, callback=answer_to_user, valute='–ë–µ–ª–æ—Ä—É—Å—Å–∫–∏–π —Ä—É–±–ª—å')
        case '–ù–∞–∑–∞–¥':  # –ó–∞–∫—Ä—ã—Ç–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            bot.send_message(message.chat.id, data['close_markup'], reply_markup=types.ReplyKeyboardRemove())
        case _:
            bot.send_message(message.chat.id, data['not_in_dict'])


bot.polling(non_stop=True)
